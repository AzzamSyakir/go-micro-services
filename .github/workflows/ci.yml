name: CI Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cat <<EOF > .env
          # Environment variables for the application
          AUTH_HOST=${{ secrets.AUTH_HOST }}
          USER_HOST=${{ secrets.USER_HOST }}
          PRODUCT_HOST=${{ secrets.PRODUCT_HOST }}
          ORDER_HOST=${{ secrets.ORDER_HOST }}

          # Ports for various services
          AUTH_PORT=${{ secrets.AUTH_PORT }}
          USER_PORT=${{ secrets.USER_PORT }}
          PRODUCT_PORT=${{ secrets.PRODUCT_PORT }}
          ORDER_PORT=${{ secrets.ORDER_PORT }}
          AUTH_GRPC_PORT=${{ secrets.AUTH_GRPC_PORT }}
          SWAGGER_PORT=${{ secrets.SWAGGER_PORT }}

          # PostgreSQL configuration
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}

          # Ports for various PostgreSQL services
          POSTGRES_AUTH_PORT=${{ secrets.POSTGRES_AUTH_PORT }}
          POSTGRES_USER_PORT=${{ secrets.POSTGRES_USER_PORT }}
          POSTGRES_PRODUCT_PORT=${{ secrets.POSTGRES_PRODUCT_PORT }}
          POSTGRES_ORDER_PORT=${{ secrets.POSTGRES_ORDER_PORT }}
          EOF

      - name: Login to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Create DockerHub repository if not exists
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          # Cek apakah repository sudah ada
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "$DOCKER_USERNAME:$DOCKER_PASSWORD" "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/go-micro-services/")
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Repository belum ada. Membuat repository go-micro-services..."
            curl -s -X POST "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/" \
              -H "Content-Type: application/json" \
              -d '{"name": "go-micro-services", "description": "Repository for Go Micro Services", "is_private": false}' \
              -u "$DOCKER_USERNAME:$DOCKER_PASSWORD"
          else
            echo "Repository sudah ada."
          fi

      - name: Build Docker images
        run: |
          # Pastikan context build sesuai dengan direktori Dockerfile masing-masing
          docker build -f src/auth-service/Dockerfile -t bukanasa/go-micro-services:auth-service-latest src/auth-service
          docker build -f src/order-service/Dockerfile -t bukanasa/go-micro-services:order-service-latest src/order-service
          docker build -f src/product-service/Dockerfile -t bukanasa/go-micro-services:product-service-latest src/product-service
          docker build -f src/user-service/Dockerfile -t bukanasa/go-micro-services:user-service-latest src/user-service

      - name: List Docker images (for debugging)
        run: docker images

      - name: Push Docker images to DockerHub
        run: |
          docker push bukanasa/go-micro-services:auth-service-latest
          docker push bukanasa/go-micro-services:order-service-latest
          docker push bukanasa/go-micro-services:product-service-latest
          docker push bukanasa/go-micro-services:user-service-latest
